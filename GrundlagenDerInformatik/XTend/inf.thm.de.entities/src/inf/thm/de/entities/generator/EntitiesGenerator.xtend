/*
 * generated by Xtext 2.18.0
 */
package inf.thm.de.entities.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import inf.thm.de.entities.entities.Entity

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class EntitiesGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for(e : resource.allContents. toIterable.filter (Entity)) { 
			fsa.generateFile( "entities/" + e.name + ".java", e.compile ) 
		}
	}
	
	def CharSequence compile(Entity entity)
	''' 
		package entities;
		
		public class «entity.name» 
		«IF entity.superType != null»extends «entity.superType.name»«ENDIF»{
		
		«FOR attribute : entity.attributes» 
		private «attribute.type.compile» «attribute.name»; 
		«ENDFOR»
		
		«FOR attribute : entity.attributes» 
		public «attribute.type.compile» 
		get«attribute.name.toFirstUpper»(){ return «attribute.name»; } 
		«ENDFOR» ... } 
	'''
	
	def compile(AttributeType attributeType){ attributeType.elementType.typeToString + if (attributeType.array) "[]" else "" }
	def dispatch typeToString(BasicType type){ if (type.typeName == "string") "String" else type.typeName }
	def dispatch typeToString(EntityType type){ type.entity.name }
	
}
